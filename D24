24/01/2025 Friday

Functions:

ArrowFunctions:
--->ES6 version
--->more readable and more structure
--->anonymous functions(lambda functions)
--->without function name but they are assigned to a variable.


Example:arrow functions without parameter
let c=()=>{
console.log("hi sri")
}
c()


Example:arrow functions with parameter
      let x = (x, y) => {
        console.log(x + y);
      };
      x(2, 3);
      x(35, 45);

--Arrow function with only one argument

#without using paranthesis
      let greet = (x) => console.log(x);
      greet("hello");
    </script>

--Arrow function without argument

Example:
let greet=()=>
      console.log("hello)
      greet()

--Arrow functions as an expression

Example: 

let 18;
let welcome=(age<18)?
()=>console.log('hi sri")
()=>console.log('hi sai")
welcome()

--Synchronous and asynchronous:
--synchronous will execute step by step
--one task
Example:
function task1(){
console.log("task1: start")
}
function task2(){
console.log("task2: start")
}
function task3(){
console.log("task3: start")
}
task1()
task2()
task3()

Asynchronous:
--it performs multiple task at a time.
--
console.log("hii Jahnavi");
            setTimeout(() =>{
                console.log("hii i am waiting")
            },2000);
            console.log("i am in lab")

javascript callback function:
 it is a function thst is passed arguments to another function.

function greet(name,callback){
console.log('hello,${name}!'
callbac();
}
function sayGoodbye(){
console.log("Goodbye")
}
Gret("Jaanu" , say goodbye)

#FUNTIONS
#LOOPS
#file handling
#multithreading
#excpetion handling
#json

promise:
three states
1. pending: -- still not completed -- continuing
2.fulfilled == task completed
3.rejected == the operation is failed
example:
 let mypromise = new promise((resolve,reject)=>{let success = true;
if(success){
resolve("task completed");
};else{
reject("task failed)
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        // console.log("hii Jahnavi");
        //     setTimeout(() =>{
        //         console.log("hii i am waiting")
        //     },2000);
        //     console.log("i am in lab")
         
    </script>
</body>
</html>
