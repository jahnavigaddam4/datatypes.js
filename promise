27/01/2025

promise:

-->A promise a special javascript object that represents the eventual completion( or failure)  of an asynchronous operation.
-->It allows to handle asynchronous task more efficiently than callbacks.

THREE STATES:
1.Pending : The initial state, the promise is still waiting for the operation to finish.
2.fullfilled : The operation completed successfuly
3.Rejected : The operation failed.

Exp :
1.To create a promise  - new promise()
Two parameters:-
       1.resolve - to mark the promise as succesfully
       2.reject - mark it as failed

2.handling the result :
    .then() method is called when promise is fullfilld.
  It will receive the result from resolve()
    .catch() method is called if the promise is rejected.
  It receives the error message from reject()

Example :
let mypromise = new Promise((resolve, reject) => {
    let success = true;
    if(success){
        resolve("Promise is resolved");
    }else{
        reject("Promise is rejected");
    }
    });
    mypromise
    .then((result)=>{
        console.log(result);
    });
    mypromise
    .catch((error)=>{
    console.log(error);
    })
chaining promises:
ex:
let promise = new Promise((resolve, reject) => { 
    resolve(5); 
});

promise
    .then(result => {
        document.write(result); 
        return result + 3; 
    })
    .then(result => {
        document.write(result); 
    })
    .catch(error => {
        document.write(error); 
    });
